#!/bin/bash -e

: ${AWS_ACCESS_KEY_ID:?"AWS_ACCESS_KEY_ID not specified"} 
: ${AWS_SECRET_ACCESS_KEY:?"AWS_SECRET_ACCESS_KEY not specified"} 
: ${BUCKET:?"BUCKET not specified"} 
: ${SYMMETRIC_PASSPHRASE:?"SYMMETRIC_PASSPHRASE not specified"} 

DATADIR=${DATADIR:-/data}

TIMEOUT=${TIMEOUT:-86400}
XZ_COMPRESSION_LEVEL=${XZ_COMPRESSION_LEVEL:-9}
CIPHER_ALGO=${CIPHER_ALGO:-aes256}
GPG_COMPRESSION_LEVEL=${GPG_COMPRESSION_LEVEL:-0}
NAME_PREFIX=${NAME_PREFIX:-backup-archive}
EXTENSION=${EXTENSION:-.tar.xz.gpg}
TAR_EXCLUDE="${TAR_EXCLUDE:-}"
AWSCLI_OPTIONS=${AWSCLI_OPTIONS:---sse}

# NEW: optional unencrypted local copy location (must already exist)
LOCAL_ARCHIVE_PATH=${LOCAL_ARCHIVE_PATH:-}

# Insert an artificial sleep which helps when waiting for an app to write data
sleep 10s

backup_and_stream_to_s3() {
  while true
  do
    TS="$(date +"%Y-%m-%d_%H-%M")"
    BACKUP="${NAME_PREFIX}_${TS}${EXTENSION}"
    LOCAL_FILE="${NAME_PREFIX}_${TS}.tar.xz"

    echo "Set backup file name to: $BACKUP"
    if [[ -n "$LOCAL_ARCHIVE_PATH" ]]; then
      if [[ ! -d "$LOCAL_ARCHIVE_PATH" ]]; then
        echo "ERROR: LOCAL_ARCHIVE_PATH '$LOCAL_ARCHIVE_PATH' does not exist." >&2
        exit 1
      fi
      echo "Also writing unencrypted local copy to: ${LOCAL_ARCHIVE_PATH%/}/${LOCAL_FILE}"
      # Build tar|xz ONCE, tee to local file, continue to GPG â†’ S3
      tar cpf - --numeric-owner --warning=no-file-changed --ignore-failed-read ${TAR_EXCLUDE} ${DATADIR} \
        | xz -${XZ_COMPRESSION_LEVEL} -zf - \
        | tee "${LOCAL_ARCHIVE_PATH%/}/${LOCAL_FILE}" \
        | gpg -c --cipher-algo ${CIPHER_ALGO} -z ${GPG_COMPRESSION_LEVEL} --batch --yes --pinentry-mode loopback --passphrase "${SYMMETRIC_PASSPHRASE}" \
        | aws s3 cp - "${BUCKET}/${BACKUP}" "${AWSCLI_OPTIONS}"
    else
      echo "Starting backup.."
      tar cpf - --numeric-owner --warning=no-file-changed --ignore-failed-read ${TAR_EXCLUDE} ${DATADIR} \
        | xz -${XZ_COMPRESSION_LEVEL} -zf - \
        | gpg -c --cipher-algo ${CIPHER_ALGO} -z ${GPG_COMPRESSION_LEVEL} --batch --yes --pinentry-mode loopback --passphrase "${SYMMETRIC_PASSPHRASE}" \
        | aws s3 cp - "${BUCKET}/${BACKUP}" "${AWSCLI_OPTIONS}"
    fi

    echo "Backup finished! Sleeping ${TIMEOUT}s"
    sleep $TIMEOUT
  done
}

backup_and_stream_to_s3

wait
